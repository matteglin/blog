<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>M-Space</title>
  
  <subtitle>Splunk, Cloud, Craft Beer &amp; Random Thoughts</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://matteglin.com/"/>
  <updated>2020-06-07T15:09:23.362Z</updated>
  <id>http://matteglin.com/</id>
  
  <author>
    <name>matt</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>What to do if your Splunk server certificate expires</title>
    <link href="http://matteglin.com/2020/06/07/What-to-do-if-your-Splunk-server-certificate-expires/"/>
    <id>http://matteglin.com/2020/06/07/What-to-do-if-your-Splunk-server-certificate-expires/</id>
    <published>2020-06-07T14:52:01.000Z</published>
    <updated>2020-06-07T15:09:23.362Z</updated>
    
    <content type="html"><![CDATA[<p>Splunk will automatically generate an internal server certificate on first run. This certificate is used by default for SSL secured communication from splunkd over port 8089. It is also used as part of the mongdb initialisation on the KVStore.</p><p>This certificate is auto generated on first run, and has an expiry date <strong>two years</strong> into the future.</p><p>Now, under normal use this isn’t an issue, as upgrades to the Splunk platform will ensure to renew the certificate as required (another reason to keep things up to date)</p><p>In the event it expires (I’ve seen this happen multiple times due to environments sitting on the same version for two years) you will see very odd behaviour from Splunk. Most noticeably, the KVStore will refuse to start using the expired certificate. Now, it will happily continue to run under the expired certificate, so everything is peachy until the instance restarts, at which point mongodb will exit on start due to said expired cert…</p><p><strong>How do I fix this?</strong></p><p>Actually, it’s quite simple. To force Splunk to re-issue the certificate, simply move the current server.pem out of <em>$SPLUNK_HOME/etc/auth</em> and restart Splunk.</p><p>A new certificate will be generated to replace the missing one, with a new expiry date two years into the future.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Splunk will automatically generate an internal server certificate on first run. This certificate is used by default for SSL secured commu
      
    
    </summary>
    
    
    
      <category term="splunk, ssl, certificates" scheme="http://matteglin.com/tags/splunk-ssl-certificates/"/>
    
  </entry>
  
  <entry>
    <title>Splunk, Languages &amp; 24-Hour Time</title>
    <link href="http://matteglin.com/2020/05/24/Splunk-Languages-24-Hour-Time/"/>
    <id>http://matteglin.com/2020/05/24/Splunk-Languages-24-Hour-Time/</id>
    <published>2020-05-24T14:45:26.000Z</published>
    <updated>2020-06-07T15:11:56.162Z</updated>
    
    <content type="html"><![CDATA[<p>Splunk doesn’t make it straightforward to change the language the Splunk UI presents back to you. It tries to be overly helpful by being responsive to the language of your web browser. This is fine, but sometimes for testing, and for corporate machine build reasons, you might not want to see Splunk in the same language / region setting as your OS.</p><img src="/2020/05/24/Splunk-Languages-24-Hour-Time/no_lang.png" width="492" height="532" alt="Where is my language setting?" title="Where is my language setting?"><p>Your web browser is sending language information to Splunk as part of all requests within the <strong>Accept-Language</strong> field of the Header. For many of us using standard machine builds, this can end up being <strong>en-US</strong>, which is fine, unless like me you really don’t like timestamps displayed with AM / PM format (it’s a <em>tiny</em> niggle, I know…). I ensure that my browser sends an Accept-Language key of <strong>en-GB</strong> which will cause Splunk to display all time fields in <strong>24 hour time</strong>.<br>It just makes life simpler when dealing with time.</p><p>If you’re using a non-english language version of your OS, rest assured - this should ensure Splunk returns to you the language that you expect. This of course assumes that the language is supported.</p><p>You can also use various browser extensions to manipulate the Accept-Language header and use Splunk in an alternate language. Great for testing localisation needs.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Splunk doesn’t make it straightforward to change the language the Splunk UI presents back to you. It tries to be overly helpful by being 
      
    
    </summary>
    
    
    
      <category term="splunk, i18n, time" scheme="http://matteglin.com/tags/splunk-i18n-time/"/>
    
  </entry>
  
  <entry>
    <title>Time based DHCP Lookups using Splunk</title>
    <link href="http://matteglin.com/2020/05/23/Time-based-DHCP-Lookups-using-Splunk/"/>
    <id>http://matteglin.com/2020/05/23/Time-based-DHCP-Lookups-using-Splunk/</id>
    <published>2020-05-23T18:46:00.000Z</published>
    <updated>2020-05-23T20:28:06.031Z</updated>
    
    <content type="html"><![CDATA[<p>Quite often, especially when using Splunk Enterprise Security, we need to have a dynamic lookup between IP Addresses seen in events, and hostname values. This is useful for the user looking at the event data, but also allows events from sources such as network traffic to be associated with events from sources such as Windows event log.</p><p>How can we get Splunk to do this association automatically at search time?</p><p>The answer is <strong>time based lookups</strong>.</p><p>The lookup file is very, very simple :</p><table><thead><tr><th>dhcp_time</th><th>dhcp_hostname</th><th>dhcp_ip</th></tr></thead><tbody><tr><td>timestamp</td><td>hostname</td><td>ip</td></tr></tbody></table><p>Time based lookups utilise the time of an event, to perform a lookup against a set of values with associated timestamps. Splunk will retrieve the closest match between the search time event and the lookup file. There is a maximum skew between the two times that can be implemented, so for example, we can have Splunk retrieve the closest matching value within the lookup file, that occurred within 1 hour of the event in question.</p><p>These can be configured using a standard props / transforms rule on your Splunk Search Head.</p><p><em>props.conf</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[WinEventLog:Microsoft-Windows-Sysmon&#x2F;Operational]</span><br><span class="line">LOOKUP-dhcp_lookup_auto &#x3D; dhcp_time_lookup dhcp_hostname AS host OUTPUTNEW dhcp_ip AS dhcp_ip</span><br></pre></td></tr></table></figure><p><em>transforms.conf</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[dhcp_time_lookup]</span><br><span class="line">batch_index_query &#x3D; 0</span><br><span class="line">case_sensitive_match &#x3D; 0</span><br><span class="line">filename &#x3D; dhcp_lookup.csv</span><br><span class="line">max_matches &#x3D; 1</span><br><span class="line">max_offset_secs &#x3D; 3600</span><br><span class="line">time_field &#x3D; dhcp_time</span><br><span class="line">time_format &#x3D; %s</span><br></pre></td></tr></table></figure><p>The result of this is an automatic lookup that runs on the WinEventLog:Microsoft-Windows-Sysmon/Operational sourcetype matching against a single entry of the lookup file that has a timestamp field which is no more than one hour behind our search time event. This offset allows us to have multiple entries in this lookup over time, which means that as new IP’s are assigned, events should match up against the most appropriate single entry based on time.</p><p>The lookup file itself can be automatically populated by Splunk using SPL and a DCHP dataset, such as one generated by the Windows DHCP service.</p><p><strong>Remember</strong> - if you want to use these globally, all knowledge objects must be shared globally! That includes the lookup file AND the lookup defintion. If you’re using Splunk Enteprise Security, consider using the Managed Lookups feature as this will handle permissions for you nicely.</p><p>Therefore, what we end up with is a automatic lookup that will always enrich network data with a DHCP hostname, but also events such as Windows Event log can be enriched with an an accurate and dynamic assigned IP address.</p><img src="/2020/05/23/Time-based-DHCP-Lookups-using-Splunk/lookup_on_event.png" class="" title="DHCP IP Automatic Lookup">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Quite often, especially when using Splunk Enterprise Security, we need to have a dynamic lookup between IP Addresses seen in events, and 
      
    
    </summary>
    
    
    
      <category term="splunk, splunk-es, lookups" scheme="http://matteglin.com/tags/splunk-splunk-es-lookups/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://matteglin.com/2020/05/23/Hello-World/"/>
    <id>http://matteglin.com/2020/05/23/Hello-World/</id>
    <published>2020-05-23T18:35:08.000Z</published>
    <updated>2020-05-23T18:37:43.775Z</updated>
    
    <content type="html"><![CDATA[<p>This is a test post.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is a test post.&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
</feed>
